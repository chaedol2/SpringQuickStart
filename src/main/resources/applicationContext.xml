<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	<context:component-scan base-package="com.springbook.biz" />

	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	<!-- SqlSessionFactoryBean 객체에서 SqlSession 객체 얻기 첫번쨰방법 -->
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configuration" value="classpath:sql=map-config.xml"/>
	</bean>
	
	<!-- 스프링과 JPA 연동 설정 -->
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"></bean>
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="jpaVendorAdapter" ref="jpaVendorAdapter"></property>
		<property name="packagesToScan" value="com.springbook.biz.board"></property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.OracleDialect</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.use_sql_comments">true</prop>
				<prop key="hibernate.id.new_generator_mappings">true</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
			</props>
		</property>
	</bean>
	<!-- SqlSessionFactoryBean 객체에서 SqlSession 객체 얻기 두번쨰방법 -->
	<!-- <bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:sql-map-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean> -->
	<!-- SqlSessionTemplate 클래스는 setter 메소드가 없어서 생성자로 주입 DAO 클래스 구현시 사용 -->
	<!-- <bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession"></constructor-arg>
	</bean> -->
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>

	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- Transaction 설정 JDBC or Mybatis -->
	<!-- <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice> -->
	
	<!-- Transaction 설정 JPA -->
	<bean id="txManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="*"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut"  expression="execution(* com.springbook.biz..*Impl.*(..))"/>
		
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>
	</aop:config>
	
	<!-- 컴포넌트 스캔 -->
	<!-- <context:component-scan base-package="com.springbook.biz"></context:component-scan>
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy> -->
	
	<!-- BeforeAdvice -->
	<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		
		<aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog" />
		</aop:aspect>	
	</aop:config> -->

	<!-- AfterReturningAdvice -->
	<!-- <bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" />
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj"/>
		</aop:aspect>
	</aop:config> -->

	<!-- AfterThrowingAdvice -->	
	<!-- <bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice"></bean>
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj" />
		</aop:aspect>
	</aop:config> -->
	
	<!-- AroundAdvice -->
	<!-- <bean id="around" class="com.springbook.biz.common.AroundAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.springbook.biz..*Impl.*(..))" id="allPointcut"/>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog" />
		</aop:aspect>
	</aop:config> -->
	
	
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" /> -->
	
	<!-- 객체를 생성한 후에 멤버변수 초기화 작업이 필요할때 servlet의 init()과 같은 메소드, 객체를 생성한 후에 init-method 속성으로 지정된 initMethod() 메소드 호출 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" /> -->
	
	<!-- destroy-method 속성을 이용하여 스프링 컨테이너가 객체를 삭제하기 직전에 호출 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" destroy-method="destroyMethod" /> -->
	
	<!-- 스프링에서 구동하는 시점이 아닌 해당 <bean>이 사용하는 시점에 개체를 생성 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" lazy-init="true" /> -->
	
	<!-- GoF 디자인 패턴 중 하나인 '싱글톤'패턴으로 만들어 하나의 객체만 생성하도록 유지, scope 속성값을 "singleton"으로 설정하거나 아예 생략을 해도된다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="singlethon" /> -->
	
	<!-- scope 속성을 "prototype"으로 지정할 수 있는데, 이렇게하면 스프링 컨테이너는 해당 bean이 요청될때마다 매번 새로운 객체를 생성하여 반환한다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype" /> -->
	
	<!-- 생성자주입 : SamsungTV 클래스의 객체 생성시 기본생성자가 아닌 두번째 생성자가 사용됨, SonySpeaker가 SamsungTV 클래스 밑에 등록되었지만 먼저 생성된다.-->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		생성자가 여러 개 오버로딩 되어있다면 어떤 생성자를 호출해야할지 모른다. index 속성을 이용하면 어떤 값이 몇번째 매개변수로 매핑되는지 지정할 수 있다. index는 0부터 시작
		bean으로 등록된 다른 객체일 경우 ref 속성 사용
		<constructor-arg index="0" ref="apple"></constructor-arg>
		고정된 문자열이나 정수 같은 기본형 데이터일 경우 value사용
		<constructor-arg index="1" value="2700000"></constructor-arg>
	</bean> -->
	
	<!-- Setter 주입 : property 엘리먼트를 이용하고 name속성값이 호출하고자 하는 메소드의 이름이다. name값이 speaker일경우 메소드명은 setSpeaker()이다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="2700000"></property>
	</bean> -->
	
	<!-- p 네임스페이스 사용하기 setter주입의 내용을 한줄로 간략히 표현가능 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000"/>
	
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->
	
	<!-- 컬렉션(Collection) 객체 설정 : <list> 리스트, <set> 중복값허용X, <map> Key중복값허용X value중복허용, 순서없음, <props> key,value 모두 null허용x-->
	<!-- <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
		List
			<list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list>
			
		Set
			<set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 성수동</value>
				<value>서울시 성동구 성수동</value>
			</set>
		
		Map
			<map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map>
			
		Properties
			<props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">서울시 강서구 화곡동</prop>
			</props>
			
		</property>
	</bean> -->
	
	<!-- DataSource 설정 -->
	<!-- <context:property-placeholder location="classpath:config/database.properties"/>
	
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean> -->
	
	<!-- Spring JDBC 설정 -->
	<!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean> -->
	
	<!-- Transaction 설정 -->
	<!-- <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>	
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="txPointcut"
		 expression="execution(* com.springbook.biz..*(..))" />
		 
		<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice" />
	</aop:config> -->
	
	
</beans>
