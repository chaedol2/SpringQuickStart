<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 객체를 생성한 후에 멤버변수 초기화 작업이 필요할때 servlet의 init()과 같은 메소드, 객체를 생성한 후에 init-method 속성으로 지정된 initMethod() 메소드 호출 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" /> -->
	
	<!-- destroy-method 속성을 이용하여 스프링 컨테이너가 객체를 삭제하기 직전에 호출 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" destroy-method="destroyMethod" /> -->
	
	<!-- 스프링에서 구동하는 시점이 아닌 해당 <bean>이 사용하는 시점에 개체를 생성 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" lazy-init="true" /> -->
	
	<!-- GoF 디자인 패턴 중 하나인 '싱글톤'패턴으로 만들어 하나의 객체만 생성하도록 유지, scope 속성값을 "singleton"으로 설정하거나 아예 생략을 해도된다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="singlethon" /> -->
	
	<!-- scope 속성을 "prototype"으로 지정할 수 있는데, 이렇게하면 스프링 컨테이너는 해당 bean이 요청될때마다 매번 새로운 객체를 생성하여 반환한다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype" /> -->
	
	<!-- 생성자주입 : SamsungTV 클래스의 객체 생성시 기본생성자가 아닌 두번째 생성자가 사용됨, SonySpeaker가 SamsungTV 클래스 밑에 등록되었지만 먼저 생성된다.-->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		생성자가 여러 개 오버로딩 되어있다면 어떤 생성자를 호출해야할지 모른다. index 속성을 이용하면 어떤 값이 몇번째 매개변수로 매핑되는지 지정할 수 있다. index는 0부터 시작
		bean으로 등록된 다른 객체일 경우 ref 속성 사용
		<constructor-arg index="0" ref="apple"></constructor-arg>
		고정된 문자열이나 정수 같은 기본형 데이터일 경우 value사용
		<constructor-arg index="1" value="2700000"></constructor-arg>
	</bean> -->
	
	<!-- Setter 주입 : property 엘리먼트를 이용하고 name속성값이 호출하고자 하는 메소드의 이름이다. name값이 speaker일경우 메소드명은 setSpeaker()이다. -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<property name="speaker" ref="apple"></property>
		<property name="price" value="2700000"></property>
	</bean> -->
	
	<!-- p 네임스페이스 사용하기 setter주입의 내용을 한줄로 간략히 표현가능 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="2700000"/>
	
	<bean id="sony" class="polymorphism.SonySpeaker"></bean>
	<bean id="apple" class="polymorphism.AppleSpeaker"></bean> -->
	
	<!-- 컬렉션(Collection) 객체 설정 : <list> 리스트, <set> 중복값허용X, <map> 맵, <props> 프로퍼티스-->
	<bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList">
		<!-- List -->
			<!-- <list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list> -->
			
		<!-- Set -->
			<!-- <set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 성수동</value>
				<value>서울시 성동구 성수동</value>
			</set> -->
		
		<!-- Map -->
			<!-- <map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map> -->
			
		<!-- Properties -->
			<props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">서울시 강서구 화곡동</prop>
			</props>
			
		</property>
	</bean>
</beans>
